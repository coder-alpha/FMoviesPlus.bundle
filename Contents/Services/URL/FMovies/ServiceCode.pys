#!/usr/bin/env python

import urllib2, re, urlparse, base64, json, time
# import Shared ServiceCode
import openload as Openload
import misc as host_misc_resolvers

USER_AGENT = "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0"
RE_SUB1 =  Regex(r'(?m)(^[^\#])')

####################################################################################################
def NormalizeURL(url, **kwargs):
	
	return url

####################################################################################################
def MetadataObjectForURL(url, **kwargs):

	data = get_data(url)
	title = data['title']
	isVideoOnline = data['isVideoOnline'].lower()
	
	status = ''
	# not using - since very few clients seem to support
	#if isVideoOnline == 'unknown':
	#	status = ''
	#elif isVideoOnline == 'true':
	#	status = u'\U0001F517' + ' '
	#else:
	#	status = u'\U0001F494' + ' '
	
	furl = data['url']
	summary = data['summary']
	thumb = data['thumb']
	art = data['art']
	
	try:
		content_rating = data['content_rating']
	except:
		content_rating = None
	
	try:
		year = data['year']
		year = int(year)
	except:
		year = None
		
	try:
		studio = data['studio']
	except:
		studio = None
		
	try:
		genres_a = []
		genres = data['genre']
		for g in genres.split(','):
			if g != '':
				genres_a.append(g.strip())
	except:
		pass
		
	try:
		writers_a = []
		writers = data['writers']
		for w in writers.split(','):
			if w != '':
				writers_a.append({'name': w.strip()})
	except:
		pass
	
	try:
		directors_a = []
		directors = data['directors']
		for d in directors.split(','):
			if d != '':
				directors_a.append({'name': d.strip()})
	except:
		pass
		
	try:
		roles_a = []
		roles = data['roles']
		for r in roles.split(','):
			if r != '':
				roles_a.append({'name': r.strip()})
	except:
		pass
	
	try:
		rating = float(data['rating'])
	except:
		rating = None
		
	try:
		duration = int(data['duration']) * 60 * 1000
	except:
		duration = None

	return MovieObject(
		title = status + title,
		url = furl,
		summary = summary,
		rating = rating,
		duration = duration,
		content_rating = content_rating,
		studio = studio,
		year = year,
		genres = genres_a,
		writers = writers_a,
		directors = directors_a,
		roles = roles_a,
		art = art,
		thumb = Resource.ContentsOfURLWithFallback(url = thumb, fallback='MoviePosterUnavailable.jpg')
	)

####################################################################################################
def MediaObjectsForURL(url, **kwargs):

	data = get_data(url)
	isTargetPlay = False
	host = data['host']
	title = data['title']
	isVideoOnline = data['isVideoOnline'].lower()
	media_obj = []
	params = None
	https_skip = data['useSSL']
	pairrequired = False
	direct_play = True
	provider = 'plugin'
	
	try:
		provider = data['provider']
	except:
		pass
		
	try:
		isTargetPlay = data['isTargetPlay']
	except:
		pass
	
	try:
		direct_play = not data['force_transcode']
	except:
		pass
		
	if direct_play == True and provider == 'IMDb':
		try:
			direct_play = not data['force_transcode_imdb']
		except:
			pass

	try:
		openloadApiKey = data['control_openload_api_key']
	except:
		openloadApiKey = None
	
	try:
		params = data['params']
		# p = JSON.ObjectFromString(D(params))
		# if len(p['cookie']) > 0:
			# direct_play = False
	except:
		pass
		
	# Plex does not throw a dialog for Ex.MediaNotAvailable ???
	#if isVideoOnline != 'unknown' and isVideoOnline != 'true':
	#	raise Ex.MediaNotAvailable
	
	try:
		if isTargetPlay.lower() == 'true':
		
			ourl = data['server']
			#Log("ourl -------- %s" % ourl)
			
			#url = Openload.resolve(ourl, openloadApiKey)
			#Log("url -------- %s" % url)
			
			pairrequired = data['pairrequired']
			res = '480p'

			try:
				res = data['quality']
				res = int(res.replace('p',''))
			except:
				res = 480
				
			files = [{'file':ourl,'label': res}]
			if 'openload' not in host:
				furl, params, direct_play_file = host_misc_resolvers.resolve(url=ourl, https_skip=https_skip)
				
				if furl == None:
					err = host_misc_resolvers.resolve(url=ourl, https_skip=https_skip)
					raise Exception(err)
				
				if direct_play == False:
					pass
				else:
					direct_play = direct_play_file
				
				#Log("furl -------- %s" % furl)
				#Log("params --- %s" % json.loads(base64.b64decode(params)))

				sortable_list = []
				for furlA in furl:
					#Log(furlA)
					#furlA = json.loads(furlA)
					res = furlA['label']
					ffurl = furlA['file']
					if int(res) < 1000:
						res = '0%s' % res
					sortable_list.append({'file':ffurl,'label': str(res)})
				files = sorted(sortable_list, key=lambda k: k['label'], reverse=True)
				
			for file in files:
				furl = file['file']
				res = int(file['label'])
				#Log("---------furl-------")
				#Log("%s" % furl)
				
				if '.m3u8' in furl:
					mo = MediaObject(
						protocol = 'hls' if direct_play==True else None,
						container = 'mpegts' if direct_play==True else None,
						audio_codec = AudioCodec.AAC if direct_play==True else None,
						video_resolution = res if direct_play else None,
						optimized_for_streaming = direct_play if direct_play==True else False,
						parts = [PartObject(key=Callback(PlayVideo, url=furl, refUrl=ourl, isTargetPlay=True, pairrequired=pairrequired, https_skip=https_skip, params=params, host=host, openloadApiKey=openloadApiKey))]
					)
				else:
					mo = MediaObject(
						container = Container.MP4 if direct_play==True else None,
						video_codec = VideoCodec.H264 if direct_play==True else None,
						audio_codec = AudioCodec.AAC if direct_play==True else None,
						video_resolution = res if direct_play else None,
						optimized_for_streaming = direct_play if direct_play==True else False,
						parts = [PartObject(key=Callback(PlayVideo, url=furl, isTargetPlay=True, pairrequired=pairrequired, https_skip=https_skip, params=params, host=host, openloadApiKey=openloadApiKey))]
					)
				media_obj.append(mo)
			
		else:
			files = data['server']
			try:
				filesJ = json.loads(files)
				files = filesJ
			except:
				try:
					urldata = data['urldata']
					urldata = json.loads(base64.b64decode(urldata))
					#Log("urldata -------- %s" % urldata)
					if urldata != '':
						files = urldata
						#Log("files -------- %s" % files)
						#files = json.loads(filesJ)
					else:
						quality = data['quality']
						if quality == '1080p' or quality == '720p':
							pass
						else:
							quality = '480p'
						
						files = [{'file':files,'label': quality,'type':'mp4'}]
				except:
					pass
			
			useRedirect = False
			redUrl = None
			if data['useRedirector'] == 'true':
				useRedirect = True
				redUrl = data['url']
			
			sortable_list = []
			for file in files:
				furl = file['file']
				res = file['label'].replace('p','')
				if res != '1080':
					res = '0'+res
				type = file['type']
				
				sortable_list.append({'label': res, 'file':furl, 'type':type})
				
			newlist = sorted(sortable_list, key=lambda k: k['label'], reverse=True)
			
			for file in newlist:
				furl = file['file']
				res = int(file['label'])
				type = file['type']
				
				#Log("furl ---- %s" % furl)
				#Log("host --- %s" % host)
				
				if type == 'flv' or '.flv' in furl:
					mo = MediaObject(
							container = Container.FLV if direct_play else None,
							video_codec = VideoCodec.H264 if direct_play else None,
							audio_codec = AudioCodec.AAC if direct_play else None,
							video_resolution = res if direct_play else None,
							optimized_for_streaming = direct_play,
							parts = [PartObject(key=Callback(PlayVideo, url=furl, useRedirect=useRedirect, refUrl=redUrl, https_skip=https_skip, params=params, host=host))]
						)
				elif type == '.m3u8' or '.m3u8' in furl:
					mo = MediaObject(
							protocol = 'hls' if direct_play else None,
							container = 'mpegts' if direct_play else None,
							audio_codec = AudioCodec.AAC if direct_play else None,
							video_resolution = res if direct_play else None,
							optimized_for_streaming = direct_play,
							parts = [PartObject(key=Callback(PlayVideo, url=furl, useRedirect=useRedirect, refUrl=redUrl, https_skip=https_skip, params=params, host=host))]
						)
				else:
					mo = MediaObject(
							container = Container.MP4 if direct_play else None,
							video_codec = VideoCodec.H264 if direct_play else None,
							audio_codec = AudioCodec.AAC if direct_play else None,
							video_resolution = res if direct_play else None,
							optimized_for_streaming = direct_play,
							parts = [PartObject(key=Callback(PlayVideo, url=furl, useRedirect=useRedirect, refUrl=redUrl, https_skip=https_skip, params=params, host=host))]
						)
				
				media_obj.append(mo)
	except Exception as e:
		Log('ERROR FMovies.ServiceCode MediaObjectsForURL > %s : URL:%s' % (e.args, data['server']))
		#raise Ex.MediaNotAvailable
		
	return media_obj

####################################################################################################
@indirect
def PlayVideo(url, isTargetPlay=False, useRedirect=False, refUrl=None, params=None, pairrequired=False, https_skip=False, host=None, openloadApiKey=None, **kwargs):

	try:
		if isTargetPlay and 'openload' in host:
			if pairrequired == True:
				url = Openload.resolve(url, openloadApiKey)
		elif isTargetPlay:
			#url = host_misc_resolvers.resolve(url)
			pass
	except:
		raise Ex.MediaNotAvailable
		
	if url == None:
		raise Ex.MediaNotAvailable

	http_headers = {'User-Agent': USER_AGENT}
	http_cookies = None
	
	if params != None:
		params = json.loads(base64.b64decode(params))
		if params != '':
			if 'headers' in params.keys():
				headers = params['headers']
				if headers != None and headers != '':
					for key in headers.keys():
						http_headers[key] = headers[key]
			if 'cookie' in params.keys():
				cookie = params['cookie']
				if cookie != None and cookie != '':
					headers['Cookie'] = cookie
					http_cookies = cookie
					http_headers['Cookie'] = cookie
			
	if useRedirect and refUrl != None:
		url = GetRedirect(url, 10, ref=refUrl, headers=http_headers, cookie=http_cookies)
		
	if refUrl != None:
		http_headers['Referer'] = refUrl
		
	if 'blogspot.com' in url:
		time.sleep(3)
	
	return IndirectResponse(VideoClipObject, key=url, http_headers=http_headers, post_headers=http_headers, http_cookies=http_cookies)

####################################################################################################
def get_data(url, **kwargs):
	return JSON.ObjectFromString(D(url.split('fmovies://')[1]))
	
#########################################################################################################

#########################################################################################################
import cookielib

def GetRedirect(url, timeout=10, ref=None, headers=None, cookie=None, **kwargs):
	class HTTPRedirectHandler(urllib2.HTTPRedirectHandler):
		def redirect_request(self, req, fp, code, msg, headers, newurl):
			newreq = urllib2.HTTPRedirectHandler.redirect_request(self,
				req, fp, code, msg, headers, newurl)
			if newreq is not None:
				self.redirections.append(newreq.get_full_url())
			return newreq
	
	redirectHandler = HTTPRedirectHandler()
	redirectHandler.max_redirections = 10
	redirectHandler.redirections = []

	opener = urllib2.build_opener(redirectHandler)
	opener = urllib2.install_opener(opener)
	
	cookies = cookielib.LWPCookieJar()
	handlers = [urllib2.HTTPHandler(), urllib2.HTTPSHandler(), urllib2.HTTPCookieProcessor(cookies)]
	opener = urllib2.build_opener(*handlers)
	opener = urllib2.install_opener(opener)
	
	if cookie != None:
		headers['Cookie'] = cookie
	if ref != None:
		headers['Referer'] = '%s://%s/' % (urlparse.urlparse(url).scheme, urlparse.urlparse(url).netloc)

	request = urllib2.Request(url, headers=headers)

	try:
		response = urllib2.urlopen(request, timeout=int(timeout))
		for redURL in redirectHandler.redirections:
			#urlList.append(redURL) # make a list, might be useful
			url = redURL
			
		Log("Redirect Url: %s" % url)
		return url
	except urllib2.HTTPError as response:
		Log('URL: %s' % url)
		Log('Error: %s' % response)
		return url

